PCAcrime <- as.data.frame(cbind(top5_components, crime[,16])) # create df with response column
PCAcrime
# build linear regression model
model1 <- lm(V6~., data=PCAcrime)
summary(model1)
# lr coefficients using pca components
scaled_coefficients <- model1$coefficients[2:6]
scaled_coefficients
# lr intercept using pca components
scaled_intercept <- model1$coefficients[1]
scaled_intercept
# implied regression coefficients for x_j from pca
eigenvectors <- crime_pca$rotation[,1:5]%*%scaled_coefficients
eigenvectors
# unscaled coefficients
unscaled_coefficients <- scaled_coefficients/crime_pca$scale
unscaled_coefficients
# unscaled intercept
unscaled_intercept <- scaled_intercept - sum(eigenvectors
*crime_pca$center
/crime_pca$scale)
unscaled_intercept
library(tree)
model_base = <- lm(Crime~., data=crime)
model_base <- lm(Crime~., data=crime)
model_base
model_8.2 <- lm(Crime~., data=crime)
model_8.2
model2 <- lm(Crime~., data=crime)
model2
# make prediction with pca model
pred_pca <- unscaled_intercept + as.matrix(sample)%*%unscaled_coefficients
# create dataframe from sample input from 8.2
sample <- data.frame(M = 14.0,
So = 0,
Ed = 10.0,
Po1 = 12.0,
Po2 = 15.5,
LF = 0.640,
M.F = 94.0,
Pop = 150,
NW = 1.1,
U1 = 0.120,
U2 = 3.6,
Wealth = 3200,
Ineq = 20.1,
Prob = 0.04,
Time = 39.0)
# make prediction with pca model
pred_pca <- unscaled_intercept + as.matrix(sample)%*%unscaled_coefficients
pred_pca
# r-squared of base model
print("r-squared: ", summary(model2)$r.squared)
# r-squared of base model
print(sprintf("r-squared: ", summary(model2)$r.squared))
# rmse of base model
print(sprintf("rmse: ", sigma(model2)))
# r-squared of base model
print(sprintf("r-squared: ", summary(model2)$r.squared ))
# r-squared of base model
print(sprintf("r-squared: %0.3f", summary(model2)$r.squared ))
# rmse of base model
print(sprintf("rmse: %0.3f", sigma(model2) ))
# r-squared of base model
print(sprintf("r-squared: %0.3f", summary(model2)$r.squared))
# rmse of base model
print(sprintf("rmse: %0.3", sigma(model2)))
# rmse of base model
print(sprintf("rmse: %0.3f", sigma(model2)))
# unscaled pca linear regression model
y_pred <- unscaled_intercept + as.matrix(crime[,1:15])%*%unscaled_coefficients
# unscaled pca linear regression model
y_pred <- unscaled_intercept + as.matrix(crime[,1:15])%*%unscaled_coefficients
rss <- sum((y_pred-crime[,16])^2)
tss <- sum((crime[,16]-mean(crime[,16]))^2)
r-squared <- 1-rss/tss
print(sprintf("pca lm r-squared: %0.3f", r-squared))
rsquared <- 1-rss/tss
print(sprintf("pca lm r-squared: %0.3f", rsquared))
# unscaled coefficients
unscaled_coefficients <- eigenvectors/crime_pca$scale
unscaled_coefficients
# unscaled pca linear regression model
y_pred <- unscaled_intercept + as.matrix(crime[,1:15])%*%unscaled_coefficients
rss <- sum((y_pred-crime[,16])^2)
tss <- sum((crime[,16]-mean(crime[,16]))^2)
rsquared <- 1-rss/tss
print(sprintf("pca lm r-squared: %0.3f", rsquared))
# r-squared of pca linear regression model
rmse <- sqrt(mean((crime[,16])^2))
print(sprintf("pca lm rmse: %0.3f", rmse))
library(stats)
library(factoextra)
set.seed(42)
# load data
crime <- read.delim("../week 4 data-summer/data 9.1/uscrime.txt")
head(crime)
# apply pca
crime_pca <- prcomp(crime[,1:15], center=T, scale = T)
crime_pca
# scree plot
fviz_eig(crime_pca)
# create new crime dataframe with first 5 components
top5_components <- crime_pca$x[,1:5] # get first 5 cols of PCA components
PCAcrime <- as.data.frame(cbind(top5_components, crime[,16])) # create df with response column
PCAcrime
# build pca linear regression model
model1 <- lm(V6~., data=PCAcrime)
summary(model1)
# lr coefficients using pca components
scaled_coefficients <- model1$coefficients[2:6]
scaled_coefficients
# lr intercept using pca components
scaled_intercept <- model1$coefficients[1]
scaled_intercept
# implied regression coefficients for x_j from pca
eigenvectors <- crime_pca$rotation[,1:5]%*%scaled_coefficients
eigenvectors
# unscaled coefficients
unscaled_coefficients <- eigenvectors/crime_pca$scale
unscaled_coefficients
# unscaled intercept
unscaled_intercept <- scaled_intercept - sum(eigenvectors
*crime_pca$center
/crime_pca$scale)
unscaled_intercept
# build base linear regression model
model2 <- lm(Crime~., data=crime)
model2
# r-squared of base linear regression model
print(sprintf("base lm r-squared: %0.3f", summary(model2)$r.squared))
# rmse of base linear regression model
print(sprintf("base lm rmse: %0.3f", sigma(model2)))
# unscaled pca linear regression model
y_pred <- unscaled_intercept + as.matrix(crime[,1:15])%*%unscaled_coefficients
rss <- sum((y_pred-crime[,16])^2)
tss <- sum((crime[,16]-mean(crime[,16]))^2)
rsquared <- 1-rss/tss
print(sprintf("pca lm r-squared: %0.3f", rsquared))
# r-squared of pca linear regression model
rmse <- sqrt(mean((crime[,16])^2))
print(sprintf("pca lm rmse: %0.3f", rmse))
# rmse of pca linear regression model
# create dataframe from sample input from 8.2
sample <- data.frame(M = 14.0,
So = 0,
Ed = 10.0,
Po1 = 12.0,
Po2 = 15.5,
LF = 0.640,
M.F = 94.0,
Pop = 150,
NW = 1.1,
U1 = 0.120,
U2 = 3.6,
Wealth = 3200,
Ineq = 20.1,
Prob = 0.04,
Time = 39.0)
# make prediction with pca model
pred_pca <- unscaled_intercept + as.matrix(sample)%*%unscaled_coefficients
pred_pca
library(tree)
# r-squared of pca linear regression model
rmse <- sqrt(mean((crime[,16]-y_pred)^2))
print(sprintf("pca lm rmse: %0.3f", rmse))
library(stats)
set.seed(42)
# load data
temp <- read.delim("../week 3 data-summer/data 7.2/temps.txt")
head(temp)
# single exponential smoothing
# convert temp data into time-series object
temp_vector <- as.vector(unlist(temp[2:21]))
temp_ts <- ts(temp_vector, start=1996, frequency=nrow(temp)) # beginning in 1996, nrorw(temp) observations per year
# create simple exponential smoothing model
model1 <- HoltWinters(temp_ts, # data
beta=F,  # no trend
gamma=F) # no seasonality (data is summer only)
model1$alpha
model1$beta
model1$gamma
plot(model1$fitted)
# double and triple exponential smoothing
# convert temp data into time-series object
temp_ts2 <- ts(temp_vector, start=1996, frequency=nrow(temp))
# create general exponential smoothing model
model2 <- HoltWinters(temp_ts2,
seasonal="multiplicative")
model2$alpha
model2$beta
model2$gamma
plot(model2$fitted)
library(stats)
set.seed(42)
crime <- read.delim("../week 3 data-summer/data 8.2/uscrime.txt")
head(crime)
# create dataframe from sample input from question
sample <- data.frame(M = 14.0,
So = 0,
Ed = 10.0,
Po1 = 12.0,
Po2 = 15.5,
LF = 0.640,
M.F = 94.0,
Pop = 150,
NW = 1.1,
U1 = 0.120,
U2 = 3.6,
Wealth = 3200,
Ineq = 20.1,
Prob = 0.04,
Time = 39.0)
# train linear regression model
model3 <- lm(Crime~.,
data=crime)
# get summary of baseline model
summary(model3)
# get RMSE of baseline model
sigma(model3)
# regression prediction based on sample
test <- predict(model3, sample)
test
# reponses of training dataset
summary(crime$Crime)
# train new model with only statistically significant predictors
model4 <- lm(Crime~M+Ed+Po1+U2+Ineq+Prob,
data=crime)
# get summary of new model
summary(model4)
# get RMSE of baseline model
sigma(model4)
# new regression prediction from sample data
test2 <- predict(model4, sample)
test2
install.packages(tree)
install.packages("tree")
install.packages("rpart")
install.packages("randomForest")
set.seed(42)
# build regression tree
model3 <- rpart(Crime~., data=crime)
library(rpart)
# build regression tree
model3 <- rpart(Crime~., data=crime)
summary(model3)
# build random forest
rf_model <- randomForest(Crime~., data=crime)
library(randomForest)
set.seed(42)
# build random forest
rf_model <- randomForest(Crime~., data=crime)
rf_model
# load packages
library(tree)
# build regression tree
rt_model <- tree(Crime~., data=crime)
summary(rt_model)
# build random forest
rf_model <- randomForest(Crime~., data=crime)
summary(rf_model)
rf_model
# build regression tree
tree_model <- tree(Crime~., data=crime)
summary(tree_model)
summary(tree_model)
library(stats)
library(factoextra)
set.seed(42)
# load data
crime <- read.delim("../week 4 data-summer/data 9.1/uscrime.txt")
head(crime)
# apply pca
crime_pca <- prcomp(crime[,1:15], center=T, scale = T)
crime_pca
# scree plot
fviz_eig(crime_pca)
# create new crime dataframe with first 5 components
top5_components <- crime_pca$x[,1:5] # get first 5 cols of PCA components
PCAcrime <- as.data.frame(cbind(top5_components, crime[,16])) # create df with response column
PCAcrime
# build pca linear regression model
model1 <- lm(V6~., data=PCAcrime)
summary(model1)
# lr coefficients using pca components
scaled_coefficients <- model1$coefficients[2:6]
scaled_coefficients
# lr intercept using pca components
scaled_intercept <- model1$coefficients[1]
scaled_intercept
# implied regression coefficients for x_j from pca
eigenvectors <- crime_pca$rotation[,1:5]%*%scaled_coefficients
eigenvectors
# unscaled coefficients
unscaled_coefficients <- eigenvectors/crime_pca$scale
unscaled_coefficients
# unscaled intercept
unscaled_intercept <- scaled_intercept - sum(eigenvectors
*crime_pca$center
/crime_pca$scale)
unscaled_intercept
# build base linear regression model
model2 <- lm(Crime~., data=crime)
model2
# r-squared of base linear regression model
print(sprintf("base lm r-squared: %0.3f", summary(model2)$r.squared))
# rmse of base linear regression model
print(sprintf("base lm rmse: %0.3f", sigma(model2)))
# unscaled pca linear regression model
y_pred <- unscaled_intercept + as.matrix(crime[,1:15])%*%unscaled_coefficients
# rsquared of pca linear regression model
rss <- sum((y_pred-crime[,16])^2)
tss <- sum((crime[,16]-mean(crime[,16]))^2)
rsquared <- 1-rss/tss
print(sprintf("pca lm r-squared: %0.3f", rsquared))
# rmse of pca linear regression model
rmse <- sqrt(mean((crime[,16]-y_pred)^2))
print(sprintf("pca lm rmse: %0.3f", rmse))
# create dataframe from sample input from 8.2
sample <- data.frame(M = 14.0,
So = 0,
Ed = 10.0,
Po1 = 12.0,
Po2 = 15.5,
LF = 0.640,
M.F = 94.0,
Pop = 150,
NW = 1.1,
U1 = 0.120,
U2 = 3.6,
Wealth = 3200,
Ineq = 20.1,
Prob = 0.04,
Time = 39.0)
# make prediction with pca model
pred_pca <- unscaled_intercept + as.matrix(sample)%*%unscaled_coefficients
pred_pca
# load packages
library(tree)
library(randomForest)
# review the crime dataset
head(crime)
set.seed(42)
# build regression tree
tree_model <- tree(Crime~., data=crime)
summary(tree_model)
german <- read.table("germancredit.txt")
# load packages
library(tree)
library(randomForest)
# review the crime dataset
head(crime)
library(stats)
library(factoextra)
set.seed(42)
# load data
crime <- read.delim("../week 4 data-summer/data 9.1/uscrime.txt")
head(crime)
# apply pca
crime_pca <- prcomp(crime[,1:15], center=T, scale = T)
crime_pca
# scree plot
fviz_eig(crime_pca)
# create new crime dataframe with first 5 components
top5_components <- crime_pca$x[,1:5] # get first 5 cols of PCA components
PCAcrime <- as.data.frame(cbind(top5_components, crime[,16])) # create df with response column
PCAcrime
# build pca linear regression model
model1 <- lm(V6~., data=PCAcrime)
summary(model1)
# lr coefficients using pca components
scaled_coefficients <- model1$coefficients[2:6]
scaled_coefficients
# lr intercept using pca components
scaled_intercept <- model1$coefficients[1]
scaled_intercept
# implied regression coefficients for x_j from pca
eigenvectors <- crime_pca$rotation[,1:5]%*%scaled_coefficients
eigenvectors
# unscaled coefficients
unscaled_coefficients <- eigenvectors/crime_pca$scale
unscaled_coefficients
# unscaled intercept
unscaled_intercept <- scaled_intercept - sum(eigenvectors
*crime_pca$center
/crime_pca$scale)
unscaled_intercept
# build base linear regression model
model2 <- lm(Crime~., data=crime)
model2
# r-squared of base linear regression model
print(sprintf("base lm r-squared: %0.3f", summary(model2)$r.squared))
# rmse of base linear regression model
print(sprintf("base lm rmse: %0.3f", sigma(model2)))
# unscaled pca linear regression model
y_pred <- unscaled_intercept + as.matrix(crime[,1:15])%*%unscaled_coefficients
# rsquared of pca linear regression model
rss <- sum((y_pred-crime[,16])^2)
tss <- sum((crime[,16]-mean(crime[,16]))^2)
rsquared <- 1-rss/tss
print(sprintf("pca lm r-squared: %0.3f", rsquared))
# rmse of pca linear regression model
rmse <- sqrt(mean((crime[,16]-y_pred)^2))
print(sprintf("pca lm rmse: %0.3f", rmse))
# create dataframe from sample input from 8.2
sample <- data.frame(M = 14.0,
So = 0,
Ed = 10.0,
Po1 = 12.0,
Po2 = 15.5,
LF = 0.640,
M.F = 94.0,
Pop = 150,
NW = 1.1,
U1 = 0.120,
U2 = 3.6,
Wealth = 3200,
Ineq = 20.1,
Prob = 0.04,
Time = 39.0)
# make prediction with pca model
pred_pca <- unscaled_intercept + as.matrix(sample)%*%unscaled_coefficients
pred_pca
# load packages
library(tree)
library(randomForest)
# review the crime dataset
head(crime)
set.seed(42)
# build regression tree
tree_model <- tree(Crime~., data=crime)
summary(tree_model)
set.seed(42)
# build random forest
rf_model <- randomForest(Crime~., data=crime)
rf_model
german <- read.table("germancredit.txt")
# load packages
library(rpart)
library(randomForest)
# review the crime dataset
head(crime)
# build regression tree
tree_model <- rpart(Crime~., data=crime)
summary(tree_model)
fancyRpartPlot(tree_model, main="regression tree", type=1)
plot(tree_model)
text(tree_model)
plot(tree_model)
plot(tree_model)
text(tree_model)
tree_model$variable.importance
# build random forest
rf_model <- randomForest(Crime~., data=crime, keep.forest=T, importance=T)
rf_model
randomForest::importance(rf_model)
# load data
german <- read.delim("../week 4 data-summer/data 10.3/germancredit.txt")
head(german)
# load data
german <- read.delim("../week 4 data-summer/data 10.3/germancredit.txt")
head(german)
# load data
german <- read.delim("../week 4 data-summer/data 10.3/germancredit.txt")
head(german)
# update response column
german$V21[german$V21==1]<-0
german$V21[german$V21==2]<-1
# load data
german <- read.delim("../week 4 data-summer/data 10.3/germancredit.txt", header=F)
head(german)
# load data
german <- read.table("../week 4 data-summer/data 10.3/germancredit.txt", sep=' ')
head(german)
# update response column
german$V21[german$V21==1]<-0
german$V21[german$V21==2]<-1
model3 <- glm(V21~., family=binomial(link="logit"), data=train)
# train test split
rrow <- sample(1:nrow(german), as.integer(0.7*nrow(german), replace=F))
train <- german[rrow,]
test <- german[-rrow,]
# build model
set.seed(42)
model3 <- glm(V21~., family=binomial(link="logit"), data=train)
summary(model3)
# re-run model with new predictors
set.seed(42)
logreg_model2 <- glm(V21~ V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V12+V14+V15+V16+V20,
family=binomial(link="logit"),
data=train)
summary(logreg_model2)
# generate predictions
pred <- predict(logreg_model2, test, type="response")
y_preds <- round(pred)
y_preds
preds <- round(pred)
# confusion matrix
confusionMatrix(preds, test$V21)
library(caret)
# confusion matrix
confusionMatrix(preds, test$V21)
# generate predictions
preds <- predict(logreg_model2, test, type="response")
preds <- round(preds)
# confusion matrix
confusionMatrix(preds, test$V21)
# confusion matrix
confusionMatrix(preds, as.factor(test$V21))
# confusion matrix
confusionMatrix(as.factor(preds), as.factor(test$V21))
plotROC(as.factor(test$V21), as.factor(preds))
